// console.warn(
//   "THREE.OrbitControls: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/index.html#manual/en/introduction/Import-via-modules."
// ),

(THREE.OrbitControls = function (e, t) {
  var o, n, a, i, s;
  void 0 === t &&
    // console.warn(
    //   'THREE.OrbitControls: The second parameter "domElement" is now mandatory.'
    // ),
    t === document &&
    console.error(
      'THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'
    ),
    (this.object = e),
    (this.domElement = t),
    (this.enabled = !0),
    (this.target = new THREE.Vector3()),
    (this.minDistance = 0),
    (this.maxDistance = 1 / 0),
    (this.minZoom = 0),
    (this.maxZoom = 1 / 0),
    (this.minPolarAngle = 0),
    (this.maxPolarAngle = Math.PI),
    (this.minAzimuthAngle = -1 / 0),
    (this.maxAzimuthAngle = 1 / 0),
    (this.enableDamping = !1),
    (this.dampingFactor = 0.05),
    (this.enableZoom = !0),
    (this.zoomSpeed = 1),
    (this.enableRotate = !0),
    (this.rotateSpeed = 1),
    (this.enablePan = !0),
    (this.panSpeed = 1),
    (this.screenSpacePanning = !1),
    (this.keyPanSpeed = 7),
    (this.autoRotate = !1),
    (this.autoRotateSpeed = 0.2),
    (this.enableKeys = !0),
    (this.keys = {
      LEFT: 37,
      UP: 38,
      RIGHT: 39,
      BOTTOM: 40
    }),
    (this.mouseButtons = {
      LEFT: THREE.MOUSE.ROTATE,
      MIDDLE: THREE.MOUSE.DOLLY,
      RIGHT: THREE.MOUSE.PAN
    }),
    (this.touches = {
      ONE: THREE.TOUCH.ROTATE,
      TWO: THREE.TOUCH.DOLLY_PAN
    }),
    (this.target0 = this.target.clone()),
    (this.position0 = this.object.position.clone()),
    (this.zoom0 = this.object.zoom),
    (this.getPolarAngle = function () {
      return p.phi;
    }),
    (this.getAzimuthalAngle = function () {
      return p.theta;
    }),
    (this.saveState = function () {
      r.target0.copy(r.target),
        r.position0.copy(r.object.position),
        (r.zoom0 = r.object.zoom);
    }),
    (this.reset = function () {
      r.target.copy(r.target0),
        r.object.position.copy(r.position0),
        (r.object.zoom = r.zoom0),
        r.object.updateProjectionMatrix(),
        r.dispatchEvent(c),
        r.update(),
        (E = m.NONE);
    }),
    (this.update =
      ((o = new THREE.Vector3()),
      (n = new THREE.Quaternion().setFromUnitVectors(
        e.up,
        new THREE.Vector3(0, 1, 0)
      )),
      (a = n.clone().inverse()),
      (i = new THREE.Vector3()),
      (s = new THREE.Quaternion()),
      function () {
        var e = r.object.position;
        return (
          o.copy(e).sub(r.target),
          o.applyQuaternion(n),
          p.setFromVector3(o),
          r.autoRotate &&
            E === m.NONE &&
            w(((2 * Math.PI) / 60 / 60) * r.autoRotateSpeed),
          r.enableDamping
            ? ((p.theta += d.theta * r.dampingFactor),
              (p.phi += d.phi * r.dampingFactor))
            : ((p.theta += d.theta), (p.phi += d.phi)),
          (p.theta = Math.max(
            r.minAzimuthAngle,
            Math.min(r.maxAzimuthAngle, p.theta)
          )),
          (p.phi = Math.max(r.minPolarAngle, Math.min(r.maxPolarAngle, p.phi))),
          p.makeSafe(),
          (p.radius *= b),
          (p.radius = Math.max(
            r.minDistance,
            Math.min(r.maxDistance, p.radius)
          )),
          !0 === r.enableDamping
            ? r.target.addScaledVector(T, r.dampingFactor)
            : r.target.add(T),
          o.setFromSpherical(p),
          o.applyQuaternion(a),
          e.copy(r.target).add(o),
          r.object.lookAt(r.target),
          !0 === r.enableDamping
            ? ((d.theta *= 1 - r.dampingFactor),
              (d.phi *= 1 - r.dampingFactor),
              T.multiplyScalar(1 - r.dampingFactor))
            : (d.set(0, 0, 0), T.set(0, 0, 0)),
          (b = 1),
          !!(
            O ||
            i.distanceToSquared(r.object.position) > h ||
            8 * (1 - s.dot(r.object.quaternion)) > h
          ) &&
            (r.dispatchEvent(c),
            i.copy(r.object.position),
            s.copy(r.object.quaternion),
            (O = !1),
            !0)
        );
      })),
    (this.dispose = function () {
      r.domElement.removeEventListener("contextmenu", $, !1),
        r.domElement.removeEventListener("mousedown", F, !1),
        r.domElement.removeEventListener("wheel", K, !1),
        r.domElement.removeEventListener("touchstart", q, !1),
        r.domElement.removeEventListener("touchend", J, !1),
        r.domElement.removeEventListener("touchmove", Q, !1),
        document.removeEventListener("mousemove", B, !1),
        document.removeEventListener("mouseup", G, !1),
        r.domElement.removeEventListener("keydown", W, !1);
    });
  var r = this,
    c = {
      type: "change"
    },
    u = {
      type: "start"
    },
    l = {
      type: "end"
    },
    m = {
      NONE: -1,
      ROTATE: 0,
      DOLLY: 1,
      PAN: 2,
      TOUCH_ROTATE: 3,
      TOUCH_PAN: 4,
      TOUCH_DOLLY_PAN: 5,
      TOUCH_DOLLY_ROTATE: 6
    },
    E = m.NONE,
    h = 1e-6,
    p = new THREE.Spherical(),
    d = new THREE.Spherical(),
    b = 1,
    T = new THREE.Vector3(),
    O = !1,
    f = new THREE.Vector2(),
    g = new THREE.Vector2(),
    R = new THREE.Vector2(),
    H = new THREE.Vector2(),
    v = new THREE.Vector2(),
    y = new THREE.Vector2(),
    P = new THREE.Vector2(),
    L = new THREE.Vector2(),
    A = new THREE.Vector2();

  function N() {
    return Math.pow(0.95, r.zoomSpeed);
  }

  function w(e) {
    d.theta -= e;
  }

  function j(e) {
    d.phi -= e;
  }
  var M,
    C =
      ((M = new THREE.Vector3()),
      function (e, t) {
        M.setFromMatrixColumn(t, 0), M.multiplyScalar(-e), T.add(M);
      }),
    S = (function () {
      var e = new THREE.Vector3();
      return function (t, o) {
        !0 === r.screenSpacePanning
          ? e.setFromMatrixColumn(o, 1)
          : (e.setFromMatrixColumn(o, 0), e.crossVectors(r.object.up, e)),
          e.multiplyScalar(t),
          T.add(e);
      };
    })(),
    Y = (function () {
      var e = new THREE.Vector3();
      return function (t, o) {
        var n = r.domElement;
        if (r.object.isPerspectiveCamera) {
          var a = r.object.position;
          e.copy(a).sub(r.target);
          var i = e.length();
          (i *= Math.tan(((r.object.fov / 2) * Math.PI) / 180)),
            C((2 * t * i) / n.clientHeight, r.object.matrix),
            S((2 * o * i) / n.clientHeight, r.object.matrix);
        } else
          r.object.isOrthographicCamera
            ? (C(
                (t * (r.object.right - r.object.left)) /
                  r.object.zoom /
                  n.clientWidth,
                r.object.matrix
              ),
              S(
                (o * (r.object.top - r.object.bottom)) /
                  r.object.zoom /
                  n.clientHeight,
                r.object.matrix
              ))
            : (console.warn(
                "WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."
              ),
              (r.enablePan = !1));
      };
    })();

  function k(e) {
    r.object.isPerspectiveCamera
      ? (b /= e)
      : r.object.isOrthographicCamera
      ? ((r.object.zoom = Math.max(
          r.minZoom,
          Math.min(r.maxZoom, r.object.zoom * e)
        )),
        r.object.updateProjectionMatrix(),
        (O = !0))
      : (console.warn(
          "WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."
        ),
        (r.enableZoom = !1));
  }

  function D(e) {
    r.object.isPerspectiveCamera
      ? (b *= e)
      : r.object.isOrthographicCamera
      ? ((r.object.zoom = Math.max(
          r.minZoom,
          Math.min(r.maxZoom, r.object.zoom / e)
        )),
        r.object.updateProjectionMatrix(),
        (O = !0))
      : (console.warn(
          "WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."
        ),
        (r.enableZoom = !1));
  }

  function x(e) {
    f.set(e.clientX, e.clientY);
  }

  function U(e) {
    H.set(e.clientX, e.clientY);
  }

  function V(e) {
    if (1 == e.touches.length) f.set(e.touches[0].pageX, e.touches[0].pageY);
    else {
      var t = 0.5 * (e.touches[0].pageX + e.touches[1].pageX),
        o = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);
      f.set(t, o);
    }
  }

  function z(e) {
    if (1 == e.touches.length) H.set(e.touches[0].pageX, e.touches[0].pageY);
    else {
      var t = 0.5 * (e.touches[0].pageX + e.touches[1].pageX),
        o = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);
      H.set(t, o);
    }
  }

  function X(e) {
    var t = e.touches[0].pageX - e.touches[1].pageX,
      o = e.touches[0].pageY - e.touches[1].pageY,
      n = Math.sqrt(t * t + o * o);
    P.set(0, n);
  }

  function _(e) {
    if (1 == e.touches.length) g.set(e.touches[0].pageX, e.touches[0].pageY);
    else {
      var t = 0.5 * (e.touches[0].pageX + e.touches[1].pageX),
        o = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);
      g.set(t, o);
    }
    R.subVectors(g, f).multiplyScalar(r.rotateSpeed);
    var n = r.domElement;
    w((2 * Math.PI * R.x) / n.clientHeight),
      j((2 * Math.PI * R.y) / n.clientHeight),
      f.copy(g);
  }

  function I(e) {
    if (1 == e.touches.length) v.set(e.touches[0].pageX, e.touches[0].pageY);
    else {
      var t = 0.5 * (e.touches[0].pageX + e.touches[1].pageX),
        o = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);
      v.set(t, o);
    }
    y.subVectors(v, H).multiplyScalar(r.panSpeed), Y(y.x, y.y), H.copy(v);
  }

  function Z(e) {
    var t = e.touches[0].pageX - e.touches[1].pageX,
      o = e.touches[0].pageY - e.touches[1].pageY,
      n = Math.sqrt(t * t + o * o);
    L.set(0, n), A.set(0, Math.pow(L.y / P.y, r.zoomSpeed)), k(A.y), P.copy(L);
  }

  function F(e) {
    if (!1 !== r.enabled) {
      var t;
      switch (
        (e.preventDefault(),
        r.domElement.focus ? r.domElement.focus() : window.focus(),
        e.button)
      ) {
        case 0:
          t = r.mouseButtons.LEFT;
          break;
        case 1:
          t = r.mouseButtons.MIDDLE;
          break;
        case 2:
          t = r.mouseButtons.RIGHT;
          break;
        default:
          t = -1;
      }
      switch (t) {
        case THREE.MOUSE.DOLLY:
          if (!1 === r.enableZoom) return;
          !(function (e) {
            P.set(e.clientX, e.clientY);
          })(e),
            (E = m.DOLLY);
          break;
        case THREE.MOUSE.ROTATE:
          if (e.ctrlKey || e.metaKey || e.shiftKey) {
            if (!1 === r.enablePan) return;
            U(e), (E = m.PAN);
          } else {
            if (!1 === r.enableRotate) return;
            x(e), (E = m.ROTATE);
          }
          break;
        case THREE.MOUSE.PAN:
          if (e.ctrlKey || e.metaKey || e.shiftKey) {
            if (!1 === r.enableRotate) return;
            x(e), (E = m.ROTATE);
          } else {
            if (!1 === r.enablePan) return;
            U(e), (E = m.PAN);
          }
          break;
        default:
          E = m.NONE;
      }
      E !== m.NONE &&
        (document.addEventListener("mousemove", B, !1),
        document.addEventListener("mouseup", G, !1),
        r.dispatchEvent(u));
    }
  }

  function B(e) {
    if (!1 !== r.enabled)
      switch ((e.preventDefault(), E)) {
        case m.ROTATE:
          if (!1 === r.enableRotate) return;
          !(function (e) {
            g.set(e.clientX, e.clientY),
              R.subVectors(g, f).multiplyScalar(r.rotateSpeed);
            var t = r.domElement;
            w((2 * Math.PI * R.x) / t.clientHeight),
              j((2 * Math.PI * R.y) / t.clientHeight),
              f.copy(g),
              r.update();
          })(e);
          break;
        case m.DOLLY:
          if (!1 === r.enableZoom) return;
          !(function (e) {
            L.set(e.clientX, e.clientY),
              A.subVectors(L, P),
              A.y > 0 ? k(N()) : A.y < 0 && D(N()),
              P.copy(L),
              r.update();
          })(e);
          break;
        case m.PAN:
          if (!1 === r.enablePan) return;
          !(function (e) {
            v.set(e.clientX, e.clientY),
              y.subVectors(v, H).multiplyScalar(r.panSpeed),
              Y(y.x, y.y),
              H.copy(v),
              r.update();
          })(e);
      }
  }

  function G(e) {
    !1 !== r.enabled &&
      (document.removeEventListener("mousemove", B, !1),
      document.removeEventListener("mouseup", G, !1),
      r.dispatchEvent(l),
      (E = m.NONE));
  }

  function K(e) {
    !1 === r.enabled ||
      !1 === r.enableZoom ||
      (E !== m.NONE && E !== m.ROTATE) ||
      (e.preventDefault(),
      e.stopPropagation(),
      r.dispatchEvent(u),
      (function (e) {
        e.deltaY < 0 ? D(N()) : e.deltaY > 0 && k(N()), r.update();
      })(e),
      r.dispatchEvent(l));
  }

  function W(e) {
    !1 !== r.enabled &&
      !1 !== r.enableKeys &&
      !1 !== r.enablePan &&
      (function (e) {
        var t = !1;
        switch (e.keyCode) {
          case r.keys.UP:
            Y(0, r.keyPanSpeed), (t = !0);
            break;
          case r.keys.BOTTOM:
            Y(0, -r.keyPanSpeed), (t = !0);
            break;
          case r.keys.LEFT:
            Y(r.keyPanSpeed, 0), (t = !0);
            break;
          case r.keys.RIGHT:
            Y(-r.keyPanSpeed, 0), (t = !0);
        }
        t && (e.preventDefault(), r.update());
      })(e);
  }

  function q(e) {
    if (!1 !== r.enabled) {
      switch ((e.preventDefault(), e.touches.length)) {
        case 1:
          switch (r.touches.ONE) {
            case THREE.TOUCH.ROTATE:
              if (!1 === r.enableRotate) return;
              V(e), (E = m.TOUCH_ROTATE);
              break;
            case THREE.TOUCH.PAN:
              if (!1 === r.enablePan) return;
              z(e), (E = m.TOUCH_PAN);
              break;
            default:
              E = m.NONE;
          }
          break;
        case 2:
          switch (r.touches.TWO) {
            case THREE.TOUCH.DOLLY_PAN:
              if (!1 === r.enableZoom && !1 === r.enablePan) return;
              !(function (e) {
                r.enableZoom && X(e), r.enablePan && z(e);
              })(e),
                (E = m.TOUCH_DOLLY_PAN);
              break;
            case THREE.TOUCH.DOLLY_ROTATE:
              if (!1 === r.enableZoom && !1 === r.enableRotate) return;
              !(function (e) {
                r.enableZoom && X(e), r.enableRotate && V(e);
              })(e),
                (E = m.TOUCH_DOLLY_ROTATE);
              break;
            default:
              E = m.NONE;
          }
          break;
        default:
          E = m.NONE;
      }
      E !== m.NONE && r.dispatchEvent(u);
    }
  }

  function Q(e) {
    if (!1 !== r.enabled)
      switch ((e.preventDefault(), e.stopPropagation(), E)) {
        case m.TOUCH_ROTATE:
          if (!1 === r.enableRotate) return;
          _(e), r.update();
          break;
        case m.TOUCH_PAN:
          if (!1 === r.enablePan) return;
          I(e), r.update();
          break;
        case m.TOUCH_DOLLY_PAN:
          if (!1 === r.enableZoom && !1 === r.enablePan) return;
          !(function (e) {
            r.enableZoom && Z(e), r.enablePan && I(e);
          })(e),
            r.update();
          break;
        case m.TOUCH_DOLLY_ROTATE:
          if (!1 === r.enableZoom && !1 === r.enableRotate) return;
          !(function (e) {
            r.enableZoom && Z(e), r.enableRotate && _(e);
          })(e),
            r.update();
          break;
        default:
          E = m.NONE;
      }
  }

  function J(e) {
    !1 !== r.enabled && (r.dispatchEvent(l), (E = m.NONE));
  }

  function $(e) {
    !1 !== r.enabled && e.preventDefault();
  }
  r.domElement.addEventListener("contextmenu", $, !1),
    r.domElement.addEventListener("mousedown", F, !1),
    r.domElement.addEventListener("wheel", K, !1),
    r.domElement.addEventListener("touchstart", q, !1),
    r.domElement.addEventListener("touchend", J, !1),
    r.domElement.addEventListener("touchmove", Q, !1),
    r.domElement.addEventListener("keydown", W, !1),
    -1 === r.domElement.tabIndex && (r.domElement.tabIndex = 0),
    this.update();
}),
  (THREE.OrbitControls.prototype = Object.create(
    THREE.EventDispatcher.prototype
  )),
  (THREE.OrbitControls.prototype.constructor = THREE.OrbitControls),
  (THREE.MapControls = function (e, t) {
    THREE.OrbitControls.call(this, e, t),
      (this.mouseButtons.LEFT = THREE.MOUSE.PAN),
      (this.mouseButtons.RIGHT = THREE.MOUSE.ROTATE),
      (this.touches.ONE = THREE.TOUCH.PAN),
      (this.touches.TWO = THREE.TOUCH.DOLLY_ROTATE);
  }),
  (THREE.MapControls.prototype = Object.create(
    THREE.EventDispatcher.prototype
  )),
  (THREE.MapControls.prototype.constructor = THREE.MapControls);
